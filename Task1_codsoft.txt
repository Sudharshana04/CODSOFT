
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


train_data = pd.read_csv('train_data.csv')
test_data = pd.read_csv('test_data.csv')


train_data['description'] = train_data['description'].fillna('')  # Replace NaN with an empty string
test_data['description'] = test_data['description'].fillna('')    # Replace NaN with an empty string


X_train = train_data['description']
y_train = train_data['genre']


label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)

tfidf_vectorizer = TfidfVectorizer(max_features=5000)  # You can adjust max_features as needed
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)


classifier = XGBClassifier(n_estimators=100, max_depth=5, learning_rate=0.1, random_state=42)
classifier.fit(X_train_tfidf, y_train_encoded)

X_test_tfidf = tfidf_vectorizer.transform(test_data['description'])
test_predictions_encoded = classifier.predict(X_test_tfidf)


test_predictions = label_encoder.inverse_transform(test_predictions_encoded)


test_data['PREDICTED_GENRE'] = test_predictions


test_data.to_csv('test_predictions.csv', index=False)


print("Test data with predicted genres:")
print(test_data[['id', 'title', 'description', 'PREDICTED_GENRE']])
